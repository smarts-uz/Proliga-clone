// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u8zXgekoEWGueXzasWtKpa
// Component: YeYKjN6xaEZL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput from "../../TextInput"; // plasmic-import: Feg8zJ_JrfC-/component
import { AntdRadio } from "@plasmicpkgs/antd5/skinny/registerRadio";
import Button from "../../Button"; // plasmic-import: zAmS4vc8WNH5/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u8zXgekoEWGueXzasWtKpa/projectcss
import sty from "./PlasmicAuthComponent.module.css"; // plasmic-import: YeYKjN6xaEZL/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: ajyNprvxR9CB/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CZKEhs5V2BhV/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: dpkzv3Bhr9gn/icon

createPlasmicElementProxy;

export type PlasmicAuthComponent__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  signIn: "signIn";
};
export type PlasmicAuthComponent__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  signIn?: SingleBooleanChoiceArg<"signIn">;
};
type VariantPropType = keyof PlasmicAuthComponent__VariantsArgs;
export const PlasmicAuthComponent__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "signIn"
);

export type PlasmicAuthComponent__ArgsType = {};
type ArgPropType = keyof PlasmicAuthComponent__ArgsType;
export const PlasmicAuthComponent__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthComponent__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  form?: Flex__<typeof FormWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  input4?: Flex__<typeof AntdInput>;
  numberInput2?: Flex__<typeof AntdInputNumber>;
  input3?: Flex__<typeof AntdInput>;
  emailInput?: Flex__<typeof TextInput>;
  passwordInput?: Flex__<typeof TextInput>;
  radio?: Flex__<typeof AntdRadio>;
};

export interface DefaultAuthComponentProps {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  signIn?: SingleBooleanChoiceArg<"signIn">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthComponent__RenderFunc(props: {
  variants: PlasmicAuthComponent__VariantsArgs;
  args: PlasmicAuthComponent__ArgsType;
  overrides: PlasmicAuthComponent__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "isSignUpFlow",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUpFlow
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "numberInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "input3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "signIn",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.signIn
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    users: usePlasmicDataOp(() => {
      return {
        sourceId: "egnTD9CG9tqC7cm6ya647K",
        opId: "57c5e0db-fd60-43a4-8bbb-d465bdbeea71",
        userArgs: {},
        cacheKey: `plasmic.$.57c5e0db-fd60-43a4-8bbb-d465bdbeea71.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootisSignUpFlow]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          ),
          [sty.rootsignIn]: hasVariant($state, "signIn", "signIn")
        }
      )}
    >
      <h1
        data-plasmic-name={"h1"}
        data-plasmic-override={overrides.h1}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.h1,
          {
            [sty.h1isSignUpFlow]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          }
        )}
      >
        {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
          ? "Start session"
          : "Create an Account"}
      </h1>
      <div className={classNames(projectcss.all, sty.freeBox__qmNe0)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__mIsM4)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"26px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga_clone/images/_754FacebookIconjpg.jpg",
            fullWidth: 866,
            fullHeight: 650,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__lpzXe, {
            [sty.freeBoxisSignUpFlow__lpzXel2PwB]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__iy99H,
              {
                [sty.textisSignUpFlow__iy99Hl2PwB]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "Sign in with Facebook"
              : "Create account with Facebook"}
          </div>
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__tAGzs, {
          [sty.freeBoxisSignUpFlow__tAGzsl2PwB]: hasVariant(
            $state,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        })}
      />

      <div className={classNames(projectcss.all, sty.freeBox__bFW)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___2IvQq, {
            [sty.imgisSignUpFlow___2IvQql2PwB]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"26px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga_clone/images/googleGLogosvgpng.png",
            fullWidth: 768,
            fullHeight: 768,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__txwCz,
            {
              [sty.textisSignUpFlow__txwCZl2PwB]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            }
          )}
        >
          {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
            ? "Sign in with Google"
            : "Create account with  Google"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__y8Fq)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___5Vtbv)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"50px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga_clone/images/imagespng.png",
            fullWidth: 266,
            fullHeight: 190,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___47Rk6,
            {
              [sty.textisSignUpFlow___47Rk6L2PwB]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            }
          )}
        >
          {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
            ? "Sign in with Apple"
            : "Create account with  Apple"}
        </div>
      </div>
      {(() => {
        const child$Props = {
          className: classNames("__wab_instance", sty.form, {
            [sty.formisSignUpFlow]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            ),
            [sty.formsignIn]: hasVariant($state, "signIn", "signIn")
          }),
          extendedOnValuesChange: generateStateOnChangePropForCodeComponents(
            $state,
            "value",
            ["form", "value"],
            FormWrapper_Helpers
          ),
          formItems: [
            { label: "Name", name: "name", inputType: "Text" },
            { label: "Message", name: "message", inputType: "Text Area" }
          ],

          labelCol: { span: 8, horizontalOnly: true },
          layout: "vertical",
          mode: "advanced",
          onFinish: async values => {
            const $steps = {};

            $steps["defaultSubmit"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "egnTD9CG9tqC7cm6ya647K",
                      opId: "a8d74637-7e73-4009-91bc-4f3645503aa4",
                      userArgs: {
                        variables: [$state.form.value]
                      },
                      cacheKey: null,
                      invalidatedKeys: ["plasmic_refresh_all"],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["defaultSubmit"] != null &&
              typeof $steps["defaultSubmit"] === "object" &&
              typeof $steps["defaultSubmit"].then === "function"
            ) {
              $steps["defaultSubmit"] = await $steps["defaultSubmit"];
            }

            $steps["updateEmailInputValue2"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEmailInputValue2"] != null &&
              typeof $steps["updateEmailInputValue2"] === "object" &&
              typeof $steps["updateEmailInputValue2"].then === "function"
            ) {
              $steps["updateEmailInputValue2"] = await $steps[
                "updateEmailInputValue2"
              ];
            }

            $steps["goToLogin"] = true
              ? (() => {
                  const actionArgs = { destination: `/login` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToLogin"] != null &&
              typeof $steps["goToLogin"] === "object" &&
              typeof $steps["goToLogin"].then === "function"
            ) {
              $steps["goToLogin"] = await $steps["goToLogin"];
            }
          },
          onFinishFailed: async data => {
            const $steps = {};

            $steps["updateEmailInputValue"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["emailInput", "value"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEmailInputValue"] != null &&
              typeof $steps["updateEmailInputValue"] === "object" &&
              typeof $steps["updateEmailInputValue"].then === "function"
            ) {
              $steps["updateEmailInputValue"] = await $steps[
                "updateEmailInputValue"
              ];
            }

            $steps["updateEmailInputValue2"] = true
              ? (() => {
                  const actionArgs = {
                    variable: {
                      objRoot: $state,
                      variablePath: ["passwordInput", "value"]
                    },
                    operation: 0
                  };
                  return (({ variable, value, startIndex, deleteCount }) => {
                    if (!variable) {
                      return;
                    }
                    const { objRoot, variablePath } = variable;

                    $stateSet(objRoot, variablePath, value);
                    return value;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateEmailInputValue2"] != null &&
              typeof $steps["updateEmailInputValue2"] === "object" &&
              typeof $steps["updateEmailInputValue2"].then === "function"
            ) {
              $steps["updateEmailInputValue2"] = await $steps[
                "updateEmailInputValue2"
              ];
            }
          },
          onIsSubmittingChange: generateStateOnChangePropForCodeComponents(
            $state,
            "isSubmitting",
            ["form", "isSubmitting"],
            FormWrapper_Helpers
          ),
          ref: ref => {
            $refs["form"] = ref;
          },
          submitSlot: null,
          wrapperCol: { span: 16, horizontalOnly: true }
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "value",
              plasmicStateName: "form.value"
            },
            {
              name: "isSubmitting",
              plasmicStateName: "form.isSubmitting"
            }
          ],

          [],
          FormWrapper_Helpers ?? {},
          child$Props
        );

        return (
          <FormWrapper
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            {...child$Props}
          >
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__uAyY, {
                [sty.formFieldisSignUpFlow__uAyYl2PwB]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                ),
                [sty.formFieldsignIn__uAyYqEDul]: hasVariant(
                  $state,
                  "signIn",
                  "signIn"
                )
              })}
              initialValue={undefined}
              label={""}
              name={"email"}
            >
              {(() => {
                const child$Props = {
                  autoFocus: true,
                  className: classNames("__wab_instance", sty.input),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input", "value"],
                    AntdInput_Helpers
                  ),
                  placeholder: "Enter your email",
                  size: "large",
                  value: generateStateValueProp($state, ["input", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input"}
                    data-plasmic-override={overrides.input}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__vU9O)}
              initialValue={undefined}
              label={""}
              name={"password"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input2),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input2", "value"],
                    AntdInput_Helpers
                  ),
                  placeholder: "Enter your password",
                  size: "large",
                  type: "password",
                  value: generateStateValueProp($state, ["input2", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input2.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input2"}
                    data-plasmic-override={overrides.input2}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__ysq1W, {
                [sty.formFieldisSignUpFlow__ysq1Wl2PwB]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                ),
                [sty.formFieldsignIn__ysq1WqEDul]: hasVariant(
                  $state,
                  "signIn",
                  "signIn"
                )
              })}
              initialValue={undefined}
              label={""}
              name={"id"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input4),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input4", "value"],
                    AntdInput_Helpers
                  ),
                  placeholder: "ID",
                  size: "large",
                  value: generateStateValueProp($state, ["input4", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input4.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input4"}
                    data-plasmic-override={overrides.input4}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__iskuR)}
              initialValue={undefined}
              label={"phone_number"}
              name={"phone_number"}
            >
              <AntdInputNumber
                data-plasmic-name={"numberInput2"}
                data-plasmic-override={overrides.numberInput2}
                className={classNames("__wab_instance", sty.numberInput2)}
                onChange={generateStateOnChangeProp($state, [
                  "numberInput2",
                  "value"
                ])}
                type={"number"}
                value={generateStateValueProp($state, [
                  "numberInput2",
                  "value"
                ])}
              />
            </FormItemWrapper>
            <FormItemWrapper
              className={classNames("__wab_instance", sty.formField__zu9Ro)}
              initialValue={undefined}
              label={"name"}
              name={"name"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.input3),
                  onChange: generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["input3", "value"],
                    AntdInput_Helpers
                  ),
                  value: generateStateValueProp($state, ["input3", "value"])
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "input3.value"
                    }
                  ],

                  [],
                  AntdInput_Helpers ?? {},
                  child$Props
                );

                return (
                  <AntdInput
                    data-plasmic-name={"input3"}
                    data-plasmic-override={overrides.input3}
                    {...child$Props}
                  />
                );
              })()}
            </FormItemWrapper>
            <AntdButton
              className={classNames("__wab_instance", sty.button___7LEFw, {
                [sty.buttonsignIn___7LEFwqEDul]: hasVariant(
                  $state,
                  "signIn",
                  "signIn"
                )
              })}
              submitsForm={true}
              type={"primary"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gjmFl
                )}
              >
                {"Create an Account"}
              </div>
            </AntdButton>
          </FormWrapper>
        );
      })()}
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__jv1Nv,
          {
            [sty.textisSignUpFlow__jv1Nvl2PwB]: hasVariant(
              $state,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          }
        )}
      >
        {"I FORGOT MY PASSWORD"}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__gxMpw)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__w1JiD)}
          onSubmit={async event => {
            const $steps = {};

            $steps["postgresCreate"] = true
              ? (() => {
                  const actionArgs = {
                    dataOp: {
                      sourceId: "egnTD9CG9tqC7cm6ya647K",
                      opId: "b261e770-48a0-4be1-a18b-fec70c3a9811",
                      userArgs: {
                        variables: [
                          $state.emailInput.value,
                          $state.passwordInput.value,
                          null,
                          null,
                          null
                        ]
                      },
                      cacheKey: null,
                      invalidatedKeys: ["plasmic_refresh_all"],
                      roleId: null
                    }
                  };
                  return (async ({ dataOp, continueOnError }) => {
                    try {
                      const response = await executePlasmicDataOp(dataOp, {
                        userAuthToken: dataSourcesCtx?.userAuthToken,
                        user: dataSourcesCtx?.user
                      });
                      await plasmicInvalidate(dataOp.invalidatedKeys);
                      return response;
                    } catch (e) {
                      if (!continueOnError) {
                        throw e;
                      }
                      return e;
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["postgresCreate"] != null &&
              typeof $steps["postgresCreate"] === "object" &&
              typeof $steps["postgresCreate"].then === "function"
            ) {
              $steps["postgresCreate"] = await $steps["postgresCreate"];
            }

            $steps["goToHomepage"] = true
              ? (() => {
                  const actionArgs = { destination: `/` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToHomepage"] != null &&
              typeof $steps["goToHomepage"] === "object" &&
              typeof $steps["goToHomepage"].then === "function"
            ) {
              $steps["goToHomepage"] = await $steps["goToHomepage"];
            }
          }}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ta22B,
              {
                [sty.textisSignUpFlow__ta22Bl2PwB]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
              ? "OR LOGIN WITH EMAIL"
              : "OR REGISTER USING YOUR EMAIL"}
          </div>
          <TextInput
            data-plasmic-name={"emailInput"}
            data-plasmic-override={overrides.emailInput}
            className={classNames("__wab_instance", sty.emailInput)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["emailInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Enter your email.."}
            value={
              generateStateValueProp($state, ["emailInput", "value"]) ?? ""
            }
          />

          <TextInput
            data-plasmic-name={"passwordInput"}
            data-plasmic-override={overrides.passwordInput}
            className={classNames("__wab_instance", sty.passwordInput, {
              [sty.passwordInputisSignUpFlow]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["passwordInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Enter your password..."}
            type={
              hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? "password"
                : "password"
            }
            value={
              generateStateValueProp($state, ["passwordInput", "value"]) ?? ""
            }
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___9IVMf,
              {
                [sty.textisSignUpFlow___9IVMfl2PwB]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              }
            )}
          >
            {
              "Is 8 to 15 characters, lower case, upper case, a number, a symbol and cannot contain the username."
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__o72O)}>
            <AntdRadio
              data-plasmic-name={"radio"}
              data-plasmic-override={overrides.radio}
              autoFocus={false}
              className={classNames("__wab_instance", sty.radio, {
                [sty.radioisSignUpFlow]: hasVariant(
                  $state,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sdfF7
                )}
              >
                {
                  "I have read and accept the LALIGA FANTASY Legal Terms and the Privacy Policy, and confirm that I am over 16."
                }
              </div>
            </AntdRadio>
          </div>
          <Button
            className={classNames("__wab_instance", sty.button__vePIf, {
              [sty.buttonisSignUpFlow__vePIfl2PwB]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            color={"green"}
            onClick={async event => {
              const $steps = {};

              $steps["updateEmailInputValue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["emailInput", "value"]
                      },
                      operation: 0
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateEmailInputValue"] != null &&
                typeof $steps["updateEmailInputValue"] === "object" &&
                typeof $steps["updateEmailInputValue"].then === "function"
              ) {
                $steps["updateEmailInputValue"] = await $steps[
                  "updateEmailInputValue"
                ];
              }
            }}
            onSubmit={async event => {
              const $steps = {};

              $steps["postgresCreate"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "egnTD9CG9tqC7cm6ya647K",
                        opId: "b261e770-48a0-4be1-a18b-fec70c3a9811",
                        userArgs: {
                          variables: [
                            $state.emailInput.value,
                            $state.passwordInput.value,
                            null,
                            null,
                            null
                          ]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      },
                      continueOnError: false
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["postgresCreate"] != null &&
                typeof $steps["postgresCreate"] === "object" &&
                typeof $steps["postgresCreate"].then === "function"
              ) {
                $steps["postgresCreate"] = await $steps["postgresCreate"];
              }

              $steps["goToHomepage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomepage"] != null &&
                typeof $steps["goToHomepage"] === "object" &&
                typeof $steps["goToHomepage"].then === "function"
              ) {
                $steps["goToHomepage"] = await $steps["goToHomepage"];
              }
            }}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__zXbWm,
                {
                  [sty.textisSignUpFlow__zXbWMl2PwB]: hasVariant(
                    $state,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
            >
              {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? "Start session "
                : "Create an Account"}
            </div>
          </Button>
          <div
            className={classNames(projectcss.all, sty.freeBox__ssa2L, {
              [sty.freeBoxisSignUpFlow__ssa2Ll2PwB]: hasVariant(
                $state,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vAWs,
                {
                  [sty.textisSignUpFlow__vAWSl2PwB]: hasVariant(
                    $state,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
            >
              {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? "You dont have an account?"
                : "I have an Account,"}
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__qGIcC,
                {
                  [sty.textisSignUpFlow__qGIcCl2PwB]: hasVariant(
                    $state,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToSignup"] = true
                  ? (() => {
                      const actionArgs = { destination: `/signup` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToSignup"] != null &&
                  typeof $steps["goToSignup"] === "object" &&
                  typeof $steps["goToSignup"].then === "function"
                ) {
                  $steps["goToSignup"] = await $steps["goToSignup"];
                }
              }}
            >
              {hasVariant($state, "isSignUpFlow", "isSignUpFlow")
                ? "Register"
                : "Start session"}
            </div>
          </div>
        </div>
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "form",
    "input",
    "input2",
    "input4",
    "numberInput2",
    "input3",
    "emailInput",
    "passwordInput",
    "radio"
  ],

  h1: ["h1"],
  form: ["form", "input", "input2", "input4", "numberInput2", "input3"],
  input: ["input"],
  input2: ["input2"],
  input4: ["input4"],
  numberInput2: ["numberInput2"],
  input3: ["input3"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  radio: ["radio"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  form: typeof FormWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  input4: typeof AntdInput;
  numberInput2: typeof AntdInputNumber;
  input3: typeof AntdInput;
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  radio: typeof AntdRadio;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthComponent__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthComponent__VariantsArgs;
    args?: PlasmicAuthComponent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthComponent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthComponent__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthComponent__ArgProps,
          internalVariantPropNames: PlasmicAuthComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthComponent";
  } else {
    func.displayName = `PlasmicAuthComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthComponent = Object.assign(
  // Top-level PlasmicAuthComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    form: makeNodeComponent("form"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    input4: makeNodeComponent("input4"),
    numberInput2: makeNodeComponent("numberInput2"),
    input3: makeNodeComponent("input3"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    radio: makeNodeComponent("radio"),

    // Metadata about props expected for PlasmicAuthComponent
    internalVariantProps: PlasmicAuthComponent__VariantProps,
    internalArgProps: PlasmicAuthComponent__ArgProps
  }
);

export default PlasmicAuthComponent;
/* prettier-ignore-end */
