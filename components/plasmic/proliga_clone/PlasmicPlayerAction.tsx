// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: u8zXgekoEWGueXzasWtKpa
// Component: KAsoPizYxQQO

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import InjuresEvent1 from "../../InjuresEvent1"; // plasmic-import: a3n8d0po3UOI/component
import InjuresEvent2 from "../../InjuresEvent2"; // plasmic-import: P6JTouySl2C4/component
import InjuresEvent3 from "../../InjuresEvent3"; // plasmic-import: c40669NY8-nE/component
import InjuresEvent4 from "../../InjuresEvent4"; // plasmic-import: KQcaHUN8ljCw/component
import InjuredEvent5 from "../../InjuredEvent5"; // plasmic-import: gnHuD2MuVC1G/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: u8zXgekoEWGueXzasWtKpa/projectcss
import sty from "./PlasmicPlayerAction.module.css"; // plasmic-import: KAsoPizYxQQO/css

createPlasmicElementProxy;

export type PlasmicPlayerAction__VariantMembers = {};
export type PlasmicPlayerAction__VariantsArgs = {};
type VariantPropType = keyof PlasmicPlayerAction__VariantsArgs;
export const PlasmicPlayerAction__VariantProps = new Array<VariantPropType>();

export type PlasmicPlayerAction__ArgsType = {};
type ArgPropType = keyof PlasmicPlayerAction__ArgsType;
export const PlasmicPlayerAction__ArgProps = new Array<ArgPropType>();

export type PlasmicPlayerAction__OverridesType = {
  root?: Flex__<"div">;
  injuresEvent1?: Flex__<typeof InjuresEvent1>;
  injuresEvent2?: Flex__<typeof InjuresEvent2>;
  injuresEvent3?: Flex__<typeof InjuresEvent3>;
  injuresEvent4?: Flex__<typeof InjuresEvent4>;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultPlayerActionProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPlayerAction__RenderFunc(props: {
  variants: PlasmicPlayerAction__VariantsArgs;
  args: PlasmicPlayerAction__ArgsType;
  overrides: PlasmicPlayerAction__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <InjuresEvent1
        data-plasmic-name={"injuresEvent1"}
        data-plasmic-override={overrides.injuresEvent1}
        className={classNames("__wab_instance", sty.injuresEvent1)}
      />

      <InjuresEvent2
        data-plasmic-name={"injuresEvent2"}
        data-plasmic-override={overrides.injuresEvent2}
        className={classNames("__wab_instance", sty.injuresEvent2)}
      />

      <InjuresEvent3
        data-plasmic-name={"injuresEvent3"}
        data-plasmic-override={overrides.injuresEvent3}
        className={classNames("__wab_instance", sty.injuresEvent3)}
      />

      <InjuresEvent4
        data-plasmic-name={"injuresEvent4"}
        data-plasmic-override={overrides.injuresEvent4}
        className={classNames("__wab_instance", sty.injuresEvent4)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__tu213)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__nb2P)}
        goals={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__vs93K)}
        goalAssists={true}
      />

      <InjuredEvent5
        bigChanceCreated={true}
        className={classNames("__wab_instance", sty.injuredEvent5__uVzh4)}
      />

      <InjuredEvent5
        ballsIntoTheBox={true}
        className={classNames("__wab_instance", sty.injuredEvent5___2Zv1A)}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__nwqB4)}
        penaltiesWon={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__rzG01)}
        penaltiesSaved={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__hHdFk)}
        saves={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__ahWwf)}
        effectiveClearanes={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__yqAc)}
        penaltiesMissed={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__imRp7)}
        ownGoals={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__qOvYj)}
        goalsAgainst={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5___0TyTa)}
        yellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__r2S0)}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__qhzw4)}
        redCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__ipPea)}
        goalAttempts={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__bfc3K)}
        effectiveDribbles={true}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__gdkTn)}
        recoviries={true}
        secondaryYellowCard={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__mcaz)}
        lostBalls={true}
      />

      <InjuredEvent5
        className={classNames("__wab_instance", sty.injuredEvent5__jSet1)}
        commitedPenalties={true}
      />

      <div className={classNames(projectcss.all, sty.freeBox___25Qdc)}>
        <PlasmicImg__
          alt={""}
          className={classNames(sty.img__krsPu)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"30px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga_clone/images/hospitalsvg.svg",
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />

        <PlasmicImg__
          alt={""}
          className={classNames(sty.img___3Z4FZ)}
          displayHeight={"32px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"160px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/proliga_clone/images/logoSponsorMainPinkpng.png",
            fullWidth: 100,
            fullHeight: 40,
            aspectRatio: undefined
          }}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__xQaFi
          )}
        >
          {"Point    -"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__pm02G)}>
        <PlasmicLink__
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            projectcss.all,
            projectcss.a,
            projectcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://www.plasmic.app/"}
          platform={"nextjs"}
        >
          {"TOTAL FIXTURE  "}
        </PlasmicLink__>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__nuvOn
          )}
        >
          {"34"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "injuresEvent1",
    "injuresEvent2",
    "injuresEvent3",
    "injuresEvent4",
    "link"
  ],

  injuresEvent1: ["injuresEvent1"],
  injuresEvent2: ["injuresEvent2"],
  injuresEvent3: ["injuresEvent3"],
  injuresEvent4: ["injuresEvent4"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  injuresEvent1: typeof InjuresEvent1;
  injuresEvent2: typeof InjuresEvent2;
  injuresEvent3: typeof InjuresEvent3;
  injuresEvent4: typeof InjuresEvent4;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPlayerAction__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPlayerAction__VariantsArgs;
    args?: PlasmicPlayerAction__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPlayerAction__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPlayerAction__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPlayerAction__ArgProps,
          internalVariantPropNames: PlasmicPlayerAction__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPlayerAction__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPlayerAction";
  } else {
    func.displayName = `PlasmicPlayerAction.${nodeName}`;
  }
  return func;
}

export const PlasmicPlayerAction = Object.assign(
  // Top-level PlasmicPlayerAction renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    injuresEvent1: makeNodeComponent("injuresEvent1"),
    injuresEvent2: makeNodeComponent("injuresEvent2"),
    injuresEvent3: makeNodeComponent("injuresEvent3"),
    injuresEvent4: makeNodeComponent("injuresEvent4"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicPlayerAction
    internalVariantProps: PlasmicPlayerAction__VariantProps,
    internalArgProps: PlasmicPlayerAction__ArgProps
  }
);

export default PlasmicPlayerAction;
/* prettier-ignore-end */
